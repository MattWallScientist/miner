#!/usr/bin/env python

import argparse
import pandas as pd
import numpy as np
import json
import sys
import os

from miner import miner

DESCRIPTION = """miner-enrichment - MINER compute enrichment"""

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=DESCRIPTION)
    parser.add_argument('expfile', help="input matrix")
    parser.add_argument('mapfile', help="identifier mapping file")
    parser.add_argument('revclusters', help="revised cluster JSON file")
    parser.add_argument('datadir', help="data directory for input database")
    parser.add_argument('outdir', help="output directory")
    parser.add_argument('-mg', '--mingenes', type=int, default=1, help="min number genes")
    parser.add_argument('-ct', '--corrthresh', type=float, default=0.2,
                        help="correlation threshold")
    args = parser.parse_args()

    if not os.path.exists(args.expfile):
        sys.exit("expression file not found")
    if not os.path.exists(args.mapfile):
        sys.exit("identifier mapping file not found")
    if not os.path.exists(args.revclusters):
        sys.exit("revised clusters file not found")
    if not os.path.exists(args.datadir):
        sys.exit("data directory not found")
    if not os.path.exists(args.outdir):
        os.makedirs(args.outdir)

    exp_data = pd.read_csv(args.expfile, index_col=0, header=0)
    exp_data, conv_table = miner.identifierConversion(exp_data, args.mapfile)
    exp_data = miner.zscore(exp_data)

    with open(args.revclusters, 'r') as out:
        revised_clusters = json.load(out)

    axes = miner.principalDf(revised_clusters,
                             exp_data,
                             subkey=None,
                             minNumberGenes=args.mingenes)

    # searches for
    # 1. <datadir>/network_dictionaries/tfbsdb_tf_to_genes.pkl
    # 2. <datadir>/network/dictionaries/tfbsdb_genes_to_tf.pkl
    mechanistic_output = miner.mechanisticInference(axes,
                                                    revised_clusters,
                                                    exp_data,
                                                    correlationThreshold=0.2,
                                                    dataFolder=args.datadir)

    coregulation_modules = miner.getCoregulationModules(mechanistic_output)
    regulons = miner.getRegulons(coregulation_modules,
                                 minNumberGenes=5,
                                 freqThreshold=0.333)

    coexpression_modules = miner.getCoexpressionModules(mechanistic_output)
    annotated_revised_clusters = miner.convertDictionary(revised_clusters,
                                                         conv_table)

    with open(os.path.join(args.outdir, 'mechanisticOutput.json'), 'w') as out:
        json.dump(mechanistic_output, out)

    with open(os.path.join(args.outdir, 'coregulationModules.json'), 'w') as out:
        json.dump(coregulation_modules, out)

    with open(os.path.join(args.outdir, 'regulons.json'), 'w') as out:
        json.dump(regulons, out)

    with open(os.path.join(args.outdir, 'coexpressionModules.json'), 'w') as out:
        json.dump(coexpression_modules, out)

    with open(os.path.join(args.outdir, 'coexpressionDictionary_annotated.json'), 'w') as out:
        json.dump(annotated_revised_clusters, out)


