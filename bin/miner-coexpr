#!/usr/bin/env python

import argparse
import pandas as pd
import numpy as np
import json
import sys
import os

from miner import miner

DESCRIPTION = """miner-clusters - MINER revise initial clusters"""

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=DESCRIPTION)
    parser.add_argument('expfile', help="input matrix")
    parser.add_argument('mapfile', help="identifier mapping file")
    parser.add_argument('outfile', help="output file")
    parser.add_argument('-mg', '--mingenes', type=int, default=8, help="min number genes")
    parser.add_argument('-moxs', '--minoverexpsamp', type=int, default=4,
                        help="minimum overexpression samples")
    parser.add_argument('-mx', '--maxexclusion', type=float, default=0.275,
                        help="maximum exclusion")
    parser.add_argument('-rs', '--randstate', type=float, default=12,
                        help="random state")
    parser.add_argument('-i', '--iterations', type=float, default=5,
                        help="number of iterations")
    parser.add_argument('-oxt', '--overexpthresh', type=int, default=80,
                        help="overexpression threshold")

    args = parser.parse_args()
    if not os.path.exists(args.expfile):
        sys.exit("expression file not found")
    if not os.path.exists(args.mapfile):
        sys.exit("identifier mapping file not found")

    exp_data = pd.read_csv(args.expfile, index_col=0, header=0)
    exp_data, conv_table = miner.identifierConversion(exp_data, args.mapfile)
    exp_data = miner.zscore(exp_data)
    init_clusters = miner.cluster(exp_data, minNumberGenes=args.mingenes,
                                  overExpressionThreshold=args.overexpthresh,
                                  maxExclusion=args.maxexclusion,
                                  random_state=args.randstate,
                                  iterations=args.iterations,
                                  minNumberOverExpSamples=args.minoverexpsamp)

    # sort cluster list from largest to smallest
    init_clusters.sort(key=lambda s: -len(s))

    # serialize to JSON
    ser_clusters = [list(c) for c in init_clusters]
    with open(args.outfile, 'w') as out:
        json.dump(ser_clusters, out)
